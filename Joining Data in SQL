-- 1. Select name fields (with alias) and region 
SELECT cities.name AS city,countries.name AS country, countries.region AS region  
FROM cities
  INNER JOIN countries
    ON cities.country_code = countries.code;
    
########### Inner join (3)
**** Note --> when you join a new database which has the same variable you will need to specify which table to pull from. 
****          for example, year appears in two tables here and I had to pick one ( or use the one DC suggested) 

**** Note 2, the matching for part two of three will be used again in three of three.

-- 6. Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- 1. From countries (alias as c)
  FROM countries AS c
  -- 2. Join to populations (as p)
  INNER JOIN populations AS p
    -- 3. Match on country code
    ON c.code = p.country_code
  -- 4. Join to economies (as e)
  INNER JOIN economies AS e
    -- 5. Match on country code and year
    ON c.code = e.code AND e.year = p.year


########### Inner join Using video notes 

using is a command which can only be used when the key is the same in both the tables. USING(key) 

########### Review inner join using on 

SELECT c.name AS country, l.name AS language
FROM countries AS c
  INNER JOIN languages AS l;
 
 This code results in an error because an 'INNER JOIN requires a specification of the key field (or fields) in each table.'
  
  ########### Inner join Using
  
  -- 4. Select fields
SELECT c.name AS country,continent ,l.name AS language, official
  -- 1. From countries (alias as c)
  FROM countries as c 
  -- 2. Join to languages (as l)
  INNER JOIN languages as l 
    -- 3. Match using code
    USING(code)
    
    ******** the name is tricky on this one, just remember to identify where the name is coming from. 
    
 ### Self-ish joins, just in CASE video notes
 
joining tables with itself 

CASE WHEN and THEN allows for multiple if/else statements  

-- 4. Select fields with aliases
1/3
SELECT p1.country_code, p1.size AS size2010, p2.size AS size2015
FROM populations AS p1
INNER JOIN populations as p2 
ON p1.country_code = p2.country_code

2/3
***** NOTE --> many of the codes above are just reused in different locations in 2 and 3. 

-- 5. Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015
-- 1. From populations (alias as p1)
FROM populations as p1
  -- 2. Join to itself (alias as p2)
  INNER JOIN populations as p2
    -- 3. Match on country code
    ON p1.country_code = p2.country_code
        -- 4. and year (with calculation)
        AND p1.year = p2.year-5

  
3/3

NOTE: With two numeric fields A and B, the percentage growth from A to B can be calculated as (B−A)/A∗100.0. A = 2010, b= 2015 

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- 1. calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- 2. From populations (alias as p1)
FROM populations AS p1
  -- 3. Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- 4. Match on country code
    ON p1.country_code = p2.country_code
        -- 5. and year (with calculation)
        AND p1.year = p2.year-5
        
  ##### Case when and then
  
  SELECT name, continent, code, surface_area,
    -- 1. First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- 2. Second case
        WHEN  surface_area< 2000000 AND surface_area>350000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS geosize_group
-- 5. From table
FROM countries;


##### Inner challenge
1/3
SELECT country_code, size,
    -- 1. First case
    CASE WHEN size > 50000000 THEN 'large'
        -- 2. Second case
        WHEN  size > 1000000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS popsize_group
-- 5. From table
FROM populations as p 
-- 6. Focus on 2015
WHERE year = 2015;

2/3

SELECT country_code, size,
    -- 1. First case
    CASE WHEN size > 50000000 THEN 'large'
        -- 2. Second case
        WHEN  size > 1000000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS popsize_group
-- 5. From table
INTO pop_plus
FROM populations as p 
-- 6. Focus on 2015
WHERE year = 2015;

SELECT * FROM pop_plus;

3/3

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- 5. Select fields
SELECT name, continent, geosize_group, popsize_group
-- 1. From countries_plus (alias as c)
FROM countries_plus AS c
  -- 2. Join to pop_plus (alias as p)
  JOIN pop_plus AS p
    -- 3. Match on country code
    ON c.code = p.country_code
-- 4. Order the table    
ORDER BY geosize_group;

###################################
###################################
Chapter 2 
###################################
###################################

LEFT and RIGHT JOINs video notes

outer joins reach out and add to the records in the inner table 3 typpes left, right and ...

duplicate values can be added with LJ because it just appends a table. 


###########
Left Join

1/2

-- Select the city name (with alias), the country code,
-- the country name (with alias), the region,
-- and the city proper population
SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
-- From left table (with alias)
FROM cities AS c1
  -- Join to right table (with alias)
  INNER JOIN countries AS c2
    -- Match on country code
    ON c1.country_code = c2.code
-- Order by descending country code
ORDER BY code DESC;

2/2

SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
FROM cities AS c1
  -- 1. Join right table (with alias)
  LEFT JOIN countries AS c2
    -- 2. Match on country code
    ON c1.country_code = c2.code
-- 3. Order by descending country code
ORDER BY code DESC;

#############
Left join (2)

1/2

/*
5. Select country name AS country, the country's local name,
the language name AS language, and
the percent of the language spoken in the country
*/
SELECT c.name AS country, local_name, l.name AS language, percent
-- 1. From left table (alias as c)
FROM countries AS c
-- 2. Join to right table (alias as l)
  INNER JOIN languages AS l
    -- 3. Match on fields
    ON c.code = l.code
-- 4. Order by descending country
ORDER BY country DESC;


2/2

/*
5. Select country name AS country, the country's local name,
the language name AS language, and
the percent of the language spoken in the country
*/
SELECT c.name AS country, local_name, l.name AS language, percent
-- 1. From left table (alias as c)
FROM countries AS c
  -- 2. Join to right table (alias as l)
  LEFT JOIN languages AS l
    -- 3. Match on fields
     ON c.code = l.code
-- 4. Order by descending country
ORDER BY country DESC;

#############
###########3
Left join (3)

1/3

-- 5. Select name, region, and gdp_percapita
SELECT name, region, gdp_percapita
-- 1. From countries (alias as c)
FROM countries AS c
  -- 2. Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- 3. Match on code fields
    ON c.code = e.code
-- 4. Focus on 2010
WHERE year = 2010;

2/3

-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
FROM countries AS C
  -- Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- Match on code fields
    ON c.code = e.code
-- Focus on 2010
WHERE e.year = 2010
-- Group by region
GROUP BY region;

3/3

