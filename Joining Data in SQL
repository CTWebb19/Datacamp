-- 1. Select name fields (with alias) and region 
SELECT cities.name AS city,countries.name AS country, countries.region AS region  
FROM cities
  INNER JOIN countries
    ON cities.country_code = countries.code;
    
########### Inner join (3)
**** Note --> when you join a new database which has the same variable you will need to specify which table to pull from. 
****          for example, year appears in two tables here and I had to pick one ( or use the one DC suggested) 

**** Note 2, the matching for part two of three will be used again in three of three.

-- 6. Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- 1. From countries (alias as c)
  FROM countries AS c
  -- 2. Join to populations (as p)
  INNER JOIN populations AS p
    -- 3. Match on country code
    ON c.code = p.country_code
  -- 4. Join to economies (as e)
  INNER JOIN economies AS e
    -- 5. Match on country code and year
    ON c.code = e.code AND e.year = p.year


########### Inner join Using video notes 

using is a command which can only be used when the key is the same in both the tables. USING(key) 

########### Review inner join using on 

SELECT c.name AS country, l.name AS language
FROM countries AS c
  INNER JOIN languages AS l;
 
 This code results in an error because an 'INNER JOIN requires a specification of the key field (or fields) in each table.'
  
  ########### Inner join Using
  
  -- 4. Select fields
SELECT c.name AS country,continent ,l.name AS language, official
  -- 1. From countries (alias as c)
  FROM countries as c 
  -- 2. Join to languages (as l)
  INNER JOIN languages as l 
    -- 3. Match using code
    USING(code)
    
    ******** the name is tricky on this one, just remember to identify where the name is coming from. 
    
 ### Self-ish joins, just in CASE video notes
 
joining tables with itself 

CASE WHEN and THEN allows for multiple if/else statements  

-- 4. Select fields with aliases
1/3
SELECT p1.country_code, p1.size AS size2010, p2.size AS size2015
FROM populations AS p1
INNER JOIN populations as p2 
ON p1.country_code = p2.country_code

2/3
***** NOTE --> many of the codes above are just reused in different locations in 2 and 3. 

-- 5. Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015
-- 1. From populations (alias as p1)
FROM populations as p1
  -- 2. Join to itself (alias as p2)
  INNER JOIN populations as p2
    -- 3. Match on country code
    ON p1.country_code = p2.country_code
        -- 4. and year (with calculation)
        AND p1.year = p2.year-5

  
3/3

NOTE: With two numeric fields A and B, the percentage growth from A to B can be calculated as (B−A)/A∗100.0. A = 2010, b= 2015 

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- 1. calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- 2. From populations (alias as p1)
FROM populations AS p1
  -- 3. Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- 4. Match on country code
    ON p1.country_code = p2.country_code
        -- 5. and year (with calculation)
        AND p1.year = p2.year-5
        
  ##### Case when and then
  
  SELECT name, continent, code, surface_area,
    -- 1. First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- 2. Second case
        WHEN  surface_area< 2000000 AND surface_area>350000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS geosize_group
-- 5. From table
FROM countries;


##### Inner challenge
1/3
SELECT country_code, size,
    -- 1. First case
    CASE WHEN size > 50000000 THEN 'large'
        -- 2. Second case
        WHEN  size > 1000000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS popsize_group
-- 5. From table
FROM populations as p 
-- 6. Focus on 2015
WHERE year = 2015;

2/3

SELECT country_code, size,
    -- 1. First case
    CASE WHEN size > 50000000 THEN 'large'
        -- 2. Second case
        WHEN  size > 1000000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS popsize_group
-- 5. From table
INTO pop_plus
FROM populations as p 
-- 6. Focus on 2015
WHERE year = 2015;

SELECT * FROM pop_plus;

3/3

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- 5. Select fields
SELECT name, continent, geosize_group, popsize_group
-- 1. From countries_plus (alias as c)
FROM countries_plus AS c
  -- 2. Join to pop_plus (alias as p)
  JOIN pop_plus AS p
    -- 3. Match on country code
    ON c.code = p.country_code
-- 4. Order the table    
ORDER BY geosize_group;

###################################
###################################
Chapter 2 
###################################
###################################

LEFT and RIGHT JOINs video notes

outer joins reach out and add to the records in the inner table 3 typpes left, right and ...

duplicate values can be added with LJ because it just appends a table. 


###########
Left Join

1/2

-- Select the city name (with alias), the country code,
-- the country name (with alias), the region,
-- and the city proper population
SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
-- From left table (with alias)
FROM cities AS c1
  -- Join to right table (with alias)
  INNER JOIN countries AS c2
    -- Match on country code
    ON c1.country_code = c2.code
-- Order by descending country code
ORDER BY code DESC;

2/2

SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
FROM cities AS c1
  -- 1. Join right table (with alias)
  LEFT JOIN countries AS c2
    -- 2. Match on country code
    ON c1.country_code = c2.code
-- 3. Order by descending country code
ORDER BY code DESC;

#############
Left join (2)

1/2

/*
5. Select country name AS country, the country's local name,
the language name AS language, and
the percent of the language spoken in the country
*/
SELECT c.name AS country, local_name, l.name AS language, percent
-- 1. From left table (alias as c)
FROM countries AS c
-- 2. Join to right table (alias as l)
  INNER JOIN languages AS l
    -- 3. Match on fields
    ON c.code = l.code
-- 4. Order by descending country
ORDER BY country DESC;


2/2

/*
5. Select country name AS country, the country's local name,
the language name AS language, and
the percent of the language spoken in the country
*/
SELECT c.name AS country, local_name, l.name AS language, percent
-- 1. From left table (alias as c)
FROM countries AS c
  -- 2. Join to right table (alias as l)
  LEFT JOIN languages AS l
    -- 3. Match on fields
     ON c.code = l.code
-- 4. Order by descending country
ORDER BY country DESC;

#############
###########3
Left join (3)

1/3

-- 5. Select name, region, and gdp_percapita
SELECT name, region, gdp_percapita
-- 1. From countries (alias as c)
FROM countries AS c
  -- 2. Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- 3. Match on code fields
    ON c.code = e.code
-- 4. Focus on 2010
WHERE year = 2010;

2/3

-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
FROM countries AS C
  -- Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- Match on code fields
    ON c.code = e.code
-- Focus on 2010
WHERE e.year = 2010
-- Group by region
GROUP BY region;

3/3
-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
FROM countries AS C
  -- Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- Match on code fields
    ON c.code = e.code
-- Focus on 2010
WHERE e.year = 2010
-- Group by region
GROUP BY region
ORDER BY avg_gdp DESC;

######
Right join



SELECT cities.name AS city, urbanarea_pop, countries.name AS country,
       indep_year, languages.name AS language, percent
FROM languages
  RIGHT JOIN countries
    ON languages.code = countries.code
  RIGHT JOIN cities
    ON countries.code = cities.country_code
ORDER BY city, language;

######
Full join 2

1/3

SELECT name AS country, code, region, basic_unit
-- 3. From countries
FROM countries
  -- 4. Join to currencies
  FULL JOIN currencies
    -- 5. Match on code
    USING (code)
-- 1. Where region is North America or null
WHERE region = 'North America' OR region IS NULL
-- 2. Order by region
ORDER BY region;

1/3 A??? it seems there is more than one submission to section one 

SELECT countries.name, code, languages.name AS language
-- 3. From languages
FROM languages
  -- 4. Join to countries
  FULL JOIN countries
    -- 5. Match on code
    USING (code)
-- 1. Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
-- 2. Order by ascending countries.name
ORDER BY countries.name;

2/3 

SELECT countries.name, code, languages.name AS language
FROM languages
  -- 1. Join to countries
  LEFT JOIN countries
    -- 2. Match using code
    USING (code)
-- 3. Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
ORDER BY countries.name;

3/3

SELECT countries.name, code, languages.name AS language
FROM languages
  -- 1. Join to countries
  INNER JOIN countries
    USING (code)
-- 2. Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
ORDER BY countries.name;

Full join (3)

-- 7. Select fields (with aliases)
SELECT c.name AS country, region, l.name AS language,
       basic_unit, frac_unit
-- 1. From countries (alias as c1)
FROM countries AS c
  -- 2. Join with languages (alias as l)
  FULL JOIN languages AS l
    -- 3. Match on code
    USING (code)
  -- 4. Join with currencies (alias as c2)
  FULL JOIN currencies AS c2
    -- 5. Match on code
    USING (code)
-- 6. Where region like Melanesia and Micronesia
WHERE region LIKE 'M%esia';

#### A(n) ___ join is a join combining the results of a ___ join and a ___ join.
## none of the above 

### video notes on cross joins - all possible combinations together

#### A table of two cities

1/2

-- 4. Select fields
SELECT c.name AS city, l.name AS language
-- 1. From cities (alias as c)
FROM cities AS c        
  -- 2. Join to languages (alias as l)
  CROSS JOIN languages AS l
-- 3. Where c.name like Hyderabad
WHERE c.name LIKE 'Hyder%';

2/2

-- 5. Select fields
SELECT c.name AS city, l.name AS language
-- 1. From cities (alias as c)
FROM cities AS c        
  -- 2. Join to languages (alias as l)
  INNER JOIN languages AS l
    -- 3. Match on country code
    ON c.country_code = l.code
-- 4. Where c.name like Hyderabad
WHERE c.name LIKE 'Hyder%';

######################################################
######################################################
#####################################################

for 2/2  don't be like me!!! I took forever trying to find my error and 
I missed the 'c.name as city' because I kept calling it 'c.name as cities' 

##################################################################
##################################################################

Outer challenge
--- Select fields
SELECT c.name AS country, region, p.life_expectancy AS life_exp
-- From countries (alias as c)
FROM countries AS c
  -- Join to populations (alias as p)
  LEFT JOIN populations AS p 
    -- Match on country code
ON c.code = p.country_code
-- Focus on 2010
WHERE p.year = 2010
-- Order by life_exp
ORDER BY life_exp
-- Limit to 5 records
LIMIT 5;

####################
Chapter 3 -- SET THEORY CLAUSES 
Video notes state of the union 
Venn Diagrams help understand what on a table is needed using union
Intersect and excert are subsets of the data, does this help with censoring?  I am not sure. 

#### Union

-- Select fields from 2010 table
SELECT *
  -- From 2010 table
  FROM economies2010
	-- Set theory clause
	UNION 
-- Select fields from 2015 table
SELECT *
  -- From 2015 table
  FROM economies2015
-- Order by code and year
ORDER BY code, year;

### Union(2)
-- Select field
SELECT country_code
  -- From cities
  FROM cities
	-- Set theory clause
	UNION
-- Select field
SELECT code
  -- From currencies
  FROM currencies
-- Order by country_code
ORDER BY country_code;

#### Union all

-- Select fields
SELECT code, year
  -- From economies
  FROM economies
	-- Set theory clause
	UNION ALL
-- Select fields
SELECT country_code, year
  -- From populations
  FROM populations
-- Order by code, year
ORDER BY code, year;code 

#### Video Intersectional 

INTERSECT only includes the records in common to both tables. 
table 1 
id 
1
2

table 2 
1 
3

INTERSECT will only take 1 because the record is in both tables. 

#####Intersect

-- Select fields
SELECT code, year
  -- From economies
  FROM economies
	-- Set theory clause
	INTERSECT  
-- Select fields
SELECT country_code, year
  -- From populations
 FROM populations
-- Order by code and year
ORDER BY code, year;

## Intersect (2)

-- Select fields
SELECT name
  -- From countries
  FROM countries
	-- Set theory clause
	INTERSECT
-- Select fields
SELECT name
  -- From cities
  FROM cities;
  
  ### Review union and intersect
Which of the following combinations of terms and definitions is correct?
INTERSECT: returns only records appearing in both tables

#### Video on Exceptional

## Except
-- Select field
SELECT name
  -- From cities
  FROM cities
	-- Set theory clause
	EXCEPT
-- Select field
SELECT capital
  -- From countries
  FROM countries
-- Order by result
ORDER BY name;

#### Except (2)

-- Select field
SELECT capital 
  -- From countries
  FROM countries 
	-- Set theory clause
	EXCEPT
-- Select field
SELECT name
  -- From cities
  FROM cities
-- Order by ascending capital
ORDER BY capital;


#### 
Semi-join 1/3
-- Select code
SELECT *
  -- From countries
  FROM countries 
-- Where region is Middle East
WHERE region = 'Middle East';

2/3

/*SELECT code
  FROM countries
WHERE region = 'Middle East';
*/

-- Select field
SELECT DISTINCT name
  -- From languages
  FROM languages
-- Order by name
ORDER BY name;

3/3

-- Select distinct fields
SELECT DISTINCT name
  -- From languages
  FROM languages
-- Where in statement
WHERE code IN
  -- Subquery
  (SELECT code FROM countries WHERE region = 'Middle East')
-- Order by name
ORDER BY name;

## Relating semi-join to a tweaked inner join
Distinct, or should I write DISTINCT 

#####
Diagnosing problems using anti-join
1/3
Begin by determining the number of countries in Oceania - should be 19

-- Select statement
SELECT COUNT(*)
  -- From countries
  FROM countries 
-- Where continent is Oceania
WHERE continent = 'Oceania';

2/3
.

-- 5. Select fields (with aliases)
SELECT c.code, c.name, c2.basic_unit AS currency
  -- 1. From countries (alias as c1)
  FROM countries AS c 
  	-- 2. Join with currencies (alias as c2)
  	INNER JOIN currencies AS c2
    -- 3. Match on code
    USING(code)
-- 4. Where continent is Oceania
WHERE c.continent = 'Oceania';

3/3

-- 3. Select fields
SELECT code, name
  -- 4. From Countries
  FROM countries 
  -- 5. Where continent is Oceania
  WHERE continent = 'Oceania'
  	-- 1. And code not in
  	AND code NOT IN 
  	-- 2. Subquery
  	(SELECT code FROM currencies);
    
OR WRITTEN ANOTHER WAY

-- 3. Select fields
-- 4. From Countries
-- 5. Where continent is Oceania
  	-- 1. And code not in
-- 2. Subquery
  SELECT code, name
  FROM countries 
  WHERE continent = 'Oceania'
  AND code NOT IN 
  (SELECT code FROM currencies);
    
 ######## Set theory challenge

-- Select the city name
SELECT name
  -- Alias the table where city name resides
  FROM cities AS c1
  -- Choose only records matching the result of multiple set theory clauses
  WHERE country_code IN
(
    -- Select appropriate field from economies AS e
    SELECT e.code
    FROM economies AS e
    -- Get all additional (unique) values of the field from currencies AS c2  
    UNION
    SELECT c2.code
    FROM currencies AS c2
    -- Exclude those appearing in populations AS p
    EXCEPT
    SELECT p.country_code
    FROM populations AS p
);

OR WRITTEN ANOTHER WAY

-- Select the city name 
-- Alias the table where city name resides
-- Choose only records matching the result of multiple set theory clauses 
-- Select appropriate field from economies AS e
-- Get all additional (unique) values of the field from currencies AS c2
-- Exclude those appearing in populations AS p
SELECT name
  FROM cities AS c1
  WHERE country_code IN
  (SELECT e.code
   FROM economies AS e
   UNION
   SELECT c2.code
   FROM currencies AS c2 
   EXCEPT
   SELECT p.country_code
   FROM populations AS p
);

#######################################
############### Chapter 4 - Subqueries 

embedding queries inside of queries  'inside of a where' and 'inside of a select' clause 

Subquery inside where 1/2
    
-- Select average life_expectancy
SELECT avg(life_expectancy)
  -- From populations
  FROM populations
-- Where year is 2015
WHERE year = 2015;

2/2

-- Select fields
SELECT *
  -- From populations
  FROM populations
-- Where life_expectancy is greater than
WHERE life_expectancy > 1.15 * 
  -- 1.15 * subquery
  (SELECT  
   AVG(life_expectancy)
   FROM 
  populations
  WHERE year = 2015)
AND year = 2015;






